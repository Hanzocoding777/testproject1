from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from database import Database

db = Database()

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    if not db.is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="admin_teams_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def admin_teams_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
    query = update.callback_query
    if not db.is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    teams = db.get_all_teams()
    
    if not teams:
        await query.edit_message_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for team in teams:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_team_{team['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_team_{team['id']}")
            ],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_team_{team['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        players_list = "\n".join([f"‚Ä¢ {p[0]} ‚Äì {p[1]}" for p in team['players']])
        message = (
            f"üéÆ –ö–æ–º–∞–Ω–¥–∞: {team['team_name']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {team['registration_date']}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞: {team['captain_contact']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {team['status']}\n"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {team['admin_comment'] or '–ù–µ—Ç'}\n\n"
            f"üë• –ò–≥—Ä–æ–∫–∏:\n{players_list}"
        )
        
        await query.message.reply_text(message, reply_markup=reply_markup)

    await query.answer()

async def handle_team_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)"""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # if not db.is_admin(query.from_user.id):
    #     await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    #     return

    action = query.data
    if action.startswith(("approve_team_", "reject_team_")):
        team_id = int(action.split('_')[2])
        status = 'approved' if action.startswith('approve') else 'rejected'
        
        if db.update_team_status(team_id, status=status):
            status_emoji = '‚úÖ' if status == 'approved' else '‚ùå'
            await query.answer(f"{status_emoji} –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
            team_info = db.get_team_by_id(team_id)
            if team_info:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_team_{team_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_team_{team_id}")
                    ],
                    [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_team_{team_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                players_list = "\n".join([f"‚Ä¢ {p[0]} ‚Äì {p[1]}" for p in team_info['players']])
                message = (
                    f"üéÆ –ö–æ–º–∞–Ω–¥–∞: {team_info['team_name']}\n"
                    f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {team_info['registration_date']}\n"
                    f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞: {team_info['captain_contact']}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {team_info['admin_comment'] or '–ù–µ—Ç'}\n\n"
                    f"üë• –ò–≥—Ä–æ–∫–∏:\n{players_list}"
                )
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup
                )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã")
    
    await query.answer()